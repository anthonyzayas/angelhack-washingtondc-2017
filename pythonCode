//done
def find_maker(image):
    #Converts image into various formats
    color = cv2.cvtColor(image, cv2.Color_BGR2GRAY)
    grey = cv2.GaussianBlur(gray, (5, 5), 0)
    edged = cv2.Canny(gray, 35, 125)

while True:
    #grab the current frame and initalize status
    (grabbed, frame) = camera.read()

    #gets the image
    find_maker(image)

    # find the contours in the edged image and keep
    (cnts, _) = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    c = max(cnts, key = cv2.contourArea)


    #loop over the contours
    for c in cnts:
        #approximate the contour
        peri = cv2.archLength(c, True)
        approx = cv2.approxPolyDP(c, 0.01 * peri, True)

        #ensure that the approximated conture is square
        if len(approx) >=4 and len(approx) <=6:            
            #use bonding box
            (x, y, w, h) = cv2.boundingRect(approx)
            aspectRatio = w / float (h)

            #compute solidity of the contour
            area = cv2.contourArea(c)
            hullArea = cv2.contourArea(cv2.convexHull(c))
            solidity = area / float(hullArea)

            #compute whether or not the width and height solidity and
            #aspect ratio of the contour falls within appropriate bounds
            keepDims = w > 25 and h > 25
            keepSolidity = solidity > 0.9
            keepAspectRatio = aspectRatio > =.8 and aspectRatio <= 1.2

            
